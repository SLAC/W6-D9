<?php

/**
 * @file
 * Primary module hooks for slac_core module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\slac_core\Entity\Event;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use GuzzleHttp\Exception\RequestException;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;

/**
 * Implements hook_form_FORM_ID_alter() for the search_block_form form.
 */
function slac_core_form_slac_search_form_alter(&$form, FormStateInterface $form_state) {
  // Since the exposed search form is a GET form, do not send the form tokens.
  // However, this cannot be accomplished in the form builder function
  // itself, because the tokens are added to the form after the builder function
  // is called. It has to be done in a form_alter,
  // see \Drupal\search\Form\SearchBlockForm.
  $form['form_build_id']['#access'] = FALSE;
  $form['form_token']['#access'] = FALSE;
  $form['form_id']['#access'] = FALSE;
}

/**
 * Implements hook_entity_bundle_info_alter().
 */
function slac_core_entity_bundle_info_alter(array &$bundles) {
  if (isset($bundles['node']['event'])) {
    $bundles['node']['event']['class'] = Event::class;
  }
}

/**
 * Implements hook_theme().
 */
function slac_core_theme($existing, $type, $theme, $path) {
  return [
    'filter_modal' => [
      'variables' => [
        'results_text' => NULL,
        'modal_content' => NULL,
        'num_results' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_oembed_resource_data_alter().
 */
function slac_core_oembed_resource_data_alter(array &$data, $url) {
  if (!isset($data['thumbnail_url'])) {
    return;
  }

  $client = \Drupal::httpClient();
  if (strpos($url, 'youtube.com/oembed') !== FALSE) {
    $default = 'hqdefault';
    $res = [
      'maxresdefault',
      'hqdefault',
      'sddefault',
    ];
    foreach ($res as $r) {
      $thumbnailUrl = str_replace($default, $r, $data['thumbnail_url']);
      try {
        $client->get($thumbnailUrl);
      }
      catch (RequestException $e) {
        continue;
      }
      $data['thumbnail_url'] = $thumbnailUrl;
      break;
    }
  }
  elseif (strpos($url, 'vimeo.com/api/oembed') !== FALSE) {
    $default = '295x166';
    $res = [
      ['width' => 1280, 'height' => 720],
      ['width' => 960, 'height' => 540],
      ['width' => 295, 'height' => 166],
    ];
    foreach ($res as $r) {
      $thumbnailUrl = str_replace($default, $r['width'], $data['thumbnail_url']);
      try {
        $client->get($thumbnailUrl);
      }
      catch (RequestException $e) {
        continue;
      }
      $data['thumbnail_width'] = $r['width'];
      $data['thumbnail_height'] = $r['height'];
      $data['thumbnail_url'] = $thumbnailUrl;
      break;
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function slac_core_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'related_content_for_detail_pages' && $view->current_display == 'news_article_related_stories') {
    $excluded_terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([
      'vid' => 'tags',
      'name' => 'Science News',
    ]);

    if ($excluded_terms) {
      foreach ($query->where as &$condition_group) {
        foreach ($condition_group['conditions'] as &$condition) {
          if ($condition['field'] == 'node__field_tags.field_tags_target_id = :node__field_tags_field_tags_target_id') {
            $current_terms = explode('+', $condition['value'][':node__field_tags_field_tags_target_id']);
            // Keep the excluded term if it's the only term assigned to the current node.
            $excluded_terms = $current_terms == array_keys($excluded_terms) ? [] : $excluded_terms;
            $desired_terms = implode('+', array_diff($current_terms, array_keys($excluded_terms)));
            $condition = [
              'field' => 'node__field_tags.field_tags_target_id = :node__field_tags_field_tags_target_id',
              'value' => [
                ':node__field_tags_field_tags_target_id' => $desired_terms,
              ],
              'operator' => 'formula',
            ];
          }
        }
      }
    }
  }
}

/**
 * Implements hook_media_view().
 */
function slac_core_media_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($build['#view_mode'] == 'full') {
    if ($entity->field_boolean->first()->getValue()["value"] == 0) {
      $roles = \Drupal::currentUser()->getRoles();
      if (in_array('anonymous', $roles, TRUE)) {
        throw new AccessDeniedHttpException();
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function slac_core_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['simplesamlphp_auth_login_link'])) {

    $form['login_title'] = [
      '#type' => 'html_tag',
      '#tag' => 'h1',
      '#value' => t('Login'),
      '#weight' => -999,
    ];
    $form['intro_text'] = [
      '#type' => 'html_tag',
      '#tag' => 'p',
      '#value' => t('Welcome back! Log in to access the website'),
      '#weight' => -998,
    ];
    $form['simplesamlphp_auth_login_link']['#weight'] = -99;

    // Moves the original form elements into a collapsed group.
    // $form['manual'] = [
    //   '#type' => 'details',
    //   '#title' => t('Drupal Login'),
    //   '#open' => FALSE,
    // ];
    // $form['manual']['name'] = $form['name'];
    // $form['manual']['pass'] = $form['pass'];
    // $form['manual']['actions'] = $form['actions'];
    // $form['manual']['actions']['reset'] = [
    //   '#type' => 'link',
    //   '#url' => Url::fromRoute('user.pass'),
    //   '#title' => t('Reset Password'),
    // ];
    unset($form['name'], $form['pass'], $form['actions']);

  }
}

 /*
 * Implements hook_views_pre_render().
 */
function slac_core_views_pre_render(ViewExecutable $view) {
  if ($view->id() == 'news_article_rss_intranet' && $view->current_display == 'feed_1') {
    foreach ($view->result as $row) {
      $node = $row->_entity;
      $node_internal_tags = $node->field_internal_tags;
      foreach ($node_internal_tags as $tag) {
        $node->field_tags->appendItem([
          "target_id" => $tag->target_id,
        ]);
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function slac_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Hide the keyword boost filter on media and content overview unless the user
  // is an administrator.
  if (in_array($form['#id'], [
    'views-exposed-form-content-page-1',
    'views-exposed-form-media-media-page-list',
    'views-exposed-form-media-library-page'])) {
    if (!in_array('administrator', \Drupal::currentUser()->getRoles())) {
      $form['field_keyword_boost_query_text']['#access'] = FALSE;
    }
  }
}
