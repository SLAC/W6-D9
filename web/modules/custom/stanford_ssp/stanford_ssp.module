<?php

/**
 * @file
 * stanford_ssp.module
 */

use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\stanford_ssp\Form\AuthorizationsForm;
use Drupal\user\UserInterface;

/**
 * Implements hook_config_schema_info_alter().
 */
function stanford_ssp_config_schema_info_alter(&$definitions) {
  // Change the eval_every_time from boolean to integer so we can have addtional
  // functionality when evaluating roles.
  $definitions['simplesamlphp_auth.settings']['mapping']['role']['mapping']['eval_every_time']['type'] = 'integer';
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function stanford_ssp_menu_local_tasks_alter(&$data, $route_name, RefinableCacheableDependencyInterface &$cacheability) {
  if ($route_name == 'user.login') {
    $config = \Drupal::config('stanford_ssp.settings');
    if ($config->get('hide_local_login')) {
      // Hide local tabs that have the "Recover Password" tab if local login
      // isn't allowed.
      unset($data['tabs']);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function stanford_ssp_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['simplesamlphp_auth_login_link'])) {
    $form['simplesamlphp_auth_login_link']['#attributes']['class'][] = 'decanter-button';
    $form['simplesamlphp_auth_login_link']['#attributes']['class'][] = 'su-button';

    $form['simplesamlphp_auth_login_link']['#attributes']['rel'] = 'nofollow';
    $config = \Drupal::config('stanford_ssp.settings');

    $form['login_title'] = [
      '#type' => 'html_tag',
      '#tag' => 'h1',
      '#value' => t('Login'),
      '#weight' => -999,
    ];
    $form['intro_text'] = [
      '#type' => 'html_tag',
      '#tag' => 'p',
      '#value' => t('Welcome back! Log in to access your website'),
      '#weight' => -998,
    ];

    // If configured to disallow local login, hide the local login form parts.
    if ($config->get('hide_local_login')) {
      unset($form['name'], $form['pass'], $form['actions']);
      return;
    }

    // Moves the original form elements into a collapsed group.
    $form['simplesamlphp_auth_login_link']['#weight'] = -99;
    $form['manual'] = [
      '#type' => 'details',
      '#title' => t('Drupal Login'),
      '#open' => FALSE,
    ];
    $form['manual']['name'] = $form['name'];
    $form['manual']['pass'] = $form['pass'];
    $form['manual']['actions'] = $form['actions'];
    $form['manual']['actions']['reset'] = [
      '#type' => 'link',
      '#url' => Url::fromRoute('user.pass'),
      '#title' => t('Reset Password'),
    ];
    unset($form['name'], $form['pass'], $form['actions']);
  }
}

/**
 * Implements hook_simplesamlphp_auth_allow_login().
 */
function stanford_ssp_simplesamlphp_auth_allow_login($attributes) {
  $config = \Drupal::config('stanford_ssp.settings');

  /** @var \Drupal\simplesamlphp_auth\Service\SimplesamlphpAuthManager $auth_manager */
  $auth_manager = \Drupal::service('simplesamlphp_auth.manager');
  $authname = $auth_manager->getAuthname();

  // Check if the user name is allowed.
  if (in_array($authname, $config->get('allowed.users'))) {
    return TRUE;
  }

  // Check if the user is an allowed affiliation.
  if (!empty($attributes['eduPersonAffiliation']) && array_intersect($config->get('allowed.affiliations'), $attributes['eduPersonAffiliation'])) {
    return TRUE;
  }

  $saml_attribute = $config->get('saml_attribute') ?: 'eduPersonEntitlement';
  foreach ($config->get('allowed.groups') as $group) {
    if (!empty($attributes[$saml_attribute]) && in_array($group, $attributes[$saml_attribute])) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Implements hook_simplesamlphp_auth_existing_user().
 */
function stanford_ssp_simplesamlphp_auth_existing_user($attributes) {
  if (!empty($attributes['eduPersonPrincipalName'])) {
    $saml_mail = $attributes['eduPersonPrincipalName'];
    $saml_mail = is_array($saml_mail) ? reset($saml_mail) : $saml_mail;
    $existing_users = \Drupal::service('entity_type.manager')
      ->getStorage('user')
      ->loadByProperties(['mail' => $saml_mail]);
    return is_array($existing_users) && !empty($existing_users) ? reset($existing_users) : FALSE;
  }
  return FALSE;
}
